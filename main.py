import logging
import sqlite3
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Telegram —Ç–æ–∫–µ–Ω —Å—é–¥–∞
TOKEN = 'PASTE_TOKEN_HERE'
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
DESCRIPTION, PHOTO, BUY = range(3)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('photo_marketplace.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            balance REAL,
            photos_bought INTEGER
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS photos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            file_id TEXT,
            description TEXT,
            price REAL,
            category TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bought_photos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            file_id TEXT,
            description TEXT,
            category TEXT,
            FOREIGN KEY(user_id) REFERENCES users(id)
        )
    ''')
    conn.commit()
    return conn, cursor

conn, cursor = init_db()

# Define the commission_account variable
commission_account = 0.0

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
START_MESSAGE = """
–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Telegram! üì∏

–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
- /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
- /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
- /view_free_photos - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
- /view_paid_photos - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üòÉ
"""

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
WELCOME_MESSAGE = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Telegram! üì∏

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ –ø–æ–∫—É–ø–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    buttons = [
        [KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ"), KeyboardButton("–ü–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ")],
        [KeyboardButton("–ú–æ–∏ —Ñ–æ—Ç–æ"), KeyboardButton("–ö—É–ø–∏—Ç—å —Ñ–æ—Ç–æ")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    user_id = user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    record = cursor.fetchone()
    if not record:
        cursor.execute('INSERT INTO users (id, username, balance, photos_bought) VALUES (?, ?, ?, ?)', (user_id, user.username, 100, 0))
        conn.commit()
        await update.message.reply_text(WELCOME_MESSAGE)
    else:
        cursor.execute('UPDATE users SET username = ? WHERE id = ?', (user.username, user_id))
        conn.commit()

    await update.message.reply_text(START_MESSAGE, reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def add_photo_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–æ–ø–∏—Å–∞–Ω–∏–µ> <—Ü–µ–Ω–∞ (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)>",
        reply_markup=ReplyKeyboardRemove()
    )
    return DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã
async def add_photo_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        text = update.message.text.split()
        description = ' '.join(text[:-1])
        price = float(text[-1])
        context.user_data['description'] = description
        context.user_data['price'] = price

        await update.message.reply_text(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if price == 0 else f'{price} Telegram Stars'}\n\n"
                                        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return PHOTO

    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <–æ–ø–∏—Å–∞–Ω–∏–µ> <—Ü–µ–Ω–∞ (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)>")
        return DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def add_photo_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    try:
        description = context.user_data['description']
        price = context.user_data['price']
        category = 'free' if price == 0 else 'paid'

        if update.message.photo:
            file = update.message.photo[-1].file_id
            cursor.execute('INSERT INTO photos (user_id, file_id, description, price, category) VALUES (?, ?, ?, ?, ?)',
                           (user_id, file, description, price, category))
            conn.commit()
            await update.message.reply_text(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è "{description}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂—É {"–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if price == 0 else f"–ø–æ —Ü–µ–Ω–µ {price} Telegram Stars"}!',
                                            reply_markup=get_main_keyboard())
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            return PHOTO
    except KeyError:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É.")
        return DESCRIPTION

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def buy_photo_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    cursor.execute('SELECT id, description, price FROM photos ORDER BY id ASC')
    records = cursor.fetchall()
    if not records:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.', reply_markup=get_main_keyboard())
        return ConversationHandler.END

    message = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n'
    for idx, (photo_id, description, price) in enumerate(records):
        message += f"{photo_id}. {description} - {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if price == 0 else f'–¶–µ–Ω–∞: {price} üåü'}\n"

    await update.message.reply_text(message)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    return BUY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def buy_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await update.message.reply_text('–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.', reply_markup=get_main_keyboard())
        return ConversationHandler.END

    try:
        photo_id = int(update.message.text)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        cursor.execute('SELECT * FROM photos WHERE id = ?', (photo_id,))
        photo = cursor.fetchone()
        if not photo:
            await update.message.reply_text('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
            return BUY

        buyer_id = update.message.from_user.id

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('SELECT * FROM users WHERE id = ?', (buyer_id,))
        buyer = cursor.fetchone()
        if not buyer:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞.', reply_markup=get_main_keyboard())
            return ConversationHandler.END

        seller_id = photo[1]
        file_id = photo[2]
        description = photo[3]
        price = photo[4]
        category = photo[5]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        if buyer[2] < price:
            await update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.', reply_markup=get_main_keyboard())
            return ConversationHandler.END

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        commission = price * 0.03
        net_payment = price - commission

        cursor.execute('UPDATE users SET balance = balance - ? WHERE id = ?', (price, buyer_id))
        cursor.execute('UPDATE users SET balance = balance + ? WHERE id = ?', (net_payment, seller_id))
        cursor.execute('INSERT INTO bought_photos (user_id, file_id, description, category) VALUES (?, ?, ?, ?)', (buyer_id, file_id, description, category))
        cursor.execute('DELETE FROM photos WHERE id = ?', (photo_id,))
        cursor.execute('UPDATE users SET photos_bought = photos_bought + 1 WHERE id = ?', (buyer_id,))
        conn.commit()

        global commission_account
        commission_account += commission

        await update.message.reply_text(f'–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è "{description}" –∫—É–ø–ª–µ–Ω–∞ –∑–∞ {price} Telegram Stars! –ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {commission} –Ω–∞ —Å—á—ë—Ç –±–∏—Ä–∂–∏.')
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=file_id)
        await update.message.reply_text('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∫—É–ø–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.', reply_markup=get_main_keyboard())
        return ConversationHandler.END

    except (ValueError, IndexError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return BUY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é.', reply_markup=get_main_keyboard())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def view_free_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await view_photos_category(update, context, 'free')

async def view_paid_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await view_photos_category(update, context, 'paid')

async def view_photos_category(update: Update, context: ContextTypes.DEFAULT_TYPE, category: str) -> None:
    cursor.execute('SELECT id, description, price FROM photos WHERE category = ?', (category,))
    records = cursor.fetchall()
    if not records:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.')
        return
    message = ''
    for idx, (photo_id, description, price) in enumerate(records):
        message += f"{photo_id}. {description} - {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if price == 0 else f'–¶–µ–Ω–∞: {price} üåü'}\n"
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id

    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_data = cursor.fetchone()
    if not user_data:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞.')
        return

    message = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"ID: {user_data[0]}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_data[1]}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user_data[2]} üåü\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data[3]}\n"
    )

    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
async def view_purchased_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    cursor.execute('SELECT file_id, description FROM bought_photos WHERE user_id = ?', (user_id,))
    records = cursor.fetchall()
    if not records:
        await update.message.reply_text('–í—ã –Ω–µ –∫—É–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.')
    else:
        media_group = []
        for record in records:
            media_group.append(InputMediaPhoto(media=record[0], caption=record[1]))
            if len(media_group) == 10:  # Send 10 photos at a time
                await context.bot.send_media_group(chat_id=update.effective_chat.id, media=media_group)
                media_group = []
        if media_group:  # Send any remaining photos
            await context.bot.send_media_group(chat_id=update.effective_chat.id, media=media_group)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
    elif text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é":
        await add_photo_start(update, context)
    elif text.lower() == "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ":
        await view_free_photos(update, context)
    elif text.lower() == "–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ":
        await view_paid_photos(update, context)
    elif text.lower() == "–º–æ–∏ —Ñ–æ—Ç–æ":
        await view_purchased_photos(update, context)
    elif text.lower() == "–∫—É–ø–∏—Ç—å —Ñ–æ—Ç–æ":
        await buy_photo_start(update, context)
    else:
        await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('add_photo', add_photo_start),
            MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é$'), add_photo_start),
            MessageHandler(filters.Regex('^–ö—É–ø–∏—Ç—å —Ñ–æ—Ç–æ$'), buy_photo_start)
        ],
        states={
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_photo_description)],
            PHOTO: [MessageHandler(filters.PHOTO, add_photo_upload)],
            BUY: [MessageHandler(filters.TEXT & ~filters.COMMAND, buy_photo)]
        },
        fallbacks=[CommandHandler('start', cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("view_free_photos", view_free_photos))
    app.add_handler(CommandHandler("view_paid_photos", view_paid_photos))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("view_purchased_photos", view_purchased_photos))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
